// Generated by CoffeeScript 1.7.1

/*
This file contains every functionality concerning variable generation and management.
 */

(function() {
  var ArrayFactory, DELIM, ElementFactory, VARSITE, VariableForm, VariableTemplates, Variables;

  DELIM = ',';

  VARSITE = $("#placeVariablesHere");


  /*
  This class is the central collection of all available variables. It is simply an implementation of a collection of key-value pairs.
   */

  Variables = (function() {
    Variables.UNINITIALIZED = 0;

    Variables.RANDOMIZED = 1;

    Variables.CUSTOMIZED = 2;

    function Variables() {
      this.vars = new Array();
      this.maxId = 0;
    }

    Variables.prototype.add = function(id, name, value, init) {
      return this.vars.push(new this.Data(id, name, value, init));
    };

    Variables.prototype.edit = function(id, newName, newValue, init) {
      var i;
      i = this.findId(id);
      return this.vars[i] = new this.Data(id, newName, newValue, init);
    };

    Variables.prototype.find = function(name) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.size(); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.vars[i].name === name) {
          return i;
        }
      }
      return -1;
    };

    Variables.prototype.findId = function(id) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.size(); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.vars[i].id === id) {
          return i;
        }
      }
      return -1;
    };

    Variables.prototype.get = function(i) {
      return this.vars[i];
    };

    Variables.prototype.getById = function(id) {
      var i, _i, _ref, _ref1;
      for (i = _i = 0, _ref = this.size(); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (((_ref1 = this.vars[i]) != null ? _ref1.id : void 0) === id) {
          return this.vars[i];
        }
      }
    };

    Variables.prototype.getByName = function(name) {
      return this.vars[this.find(name)];
    };

    Variables.prototype.isArray = function(i) {
      return $.isArray(this.vars[i].value);
    };

    Variables.prototype.isArrayByName = function(name) {
      return $.isArray(this.getByName(name).value);
    };

    Variables.prototype.isArrayById = function(id) {
      return $.isArray(this.getById(id).value);
    };

    Variables.prototype.removeByName = function(name) {
      return this.vars.splice(this.find(name), 1);
    };

    Variables.prototype.removeById = function(id) {
      return this.vars.splice(this.findId(id), 1);
    };

    Variables.prototype.size = function() {
      return this.vars.length;
    };

    Variables.prototype.toString = function(name) {
      var i, ret, value, _i, _ref;
      value = this.getByName(name).value;
      if ($.isArray(value)) {
        ret = "";
        for (i = _i = 0, _ref = value.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          ret += value[i];
          if (i < value.length - 1) {
            ret += "; ";
          }
        }
        return ret;
      } else {
        return value;
      }
    };

    Variables.Data = function(id, name, value, init) {
      this.id = id;
      this.name = name;
      this.value = value;
      return this.init = init;
    };

    return Variables;

  })();

  ElementFactory = (function() {
    function ElementFactory(vars) {
      this.vars = vars;
    }

    ElementFactory.DEFAULTNAME = "";

    ElementFactory.DEFAULTINIT = Variables.UNINITIALIZED;

    ElementFactory.DEFAULTVALUE = "";

    ElementFactory.prototype.create = function(id, init) {
      this.id = id;
      this.init = init;
      if (this.check(null)) {
        this.vars.add(this.id, this.name, this.value, this.init);
        return true;
      }
      return false;
    };

    ElementFactory.prototype.edit = function(id, init) {
      var oldName;
      this.id = id;
      this.init = init;
      oldName = this.vars.getById(id).name;
      if (this.check(oldName)) {
        this.vars.edit(this.id, this.name, this.value, this.init);
        return true;
      }
      return false;
    };

    ElementFactory.prototype.check = function(oldName) {
      var check;
      valid.target("#var-" + this.id + "-nameField", "#alert-var");
      valid.reset();
      this.name = $("#var-" + this.id + "-name").val();
      check = valid.checkName(this.name, oldName);
      if (this.init === Variables.CUSTOMIZED) {
        this.value = $("#var-" + this.id + "-value").val();
        valid.target("#var-" + this.id + "-valueField", "#alert-var");
        check = valid.checkValue(this.value) && check;
      } else {
        this.value = "?";
      }
      return check;
    };

    return ElementFactory;

  })();

  ArrayFactory = (function() {
    ArrayFactory.DEFAULTNAME = "";

    ArrayFactory.DEFAULTSIZE = 7;

    ArrayFactory.DEFAULTINIT = Variables.UNINITIALIZED;

    ArrayFactory.DEFAULTVALUES = "";

    function ArrayFactory(vars) {
      this.vars = vars;
    }

    ArrayFactory.prototype.create = function(id, init) {
      this.id = id;
      this.init = init;
      if (this.check(null)) {
        this.vars.add(this.id, this.name, this.values, this.init);
        return true;
      }
      return false;
    };


    /*
    Edit the list that was specified by the HTML add form.
    @param oldName
              The unique name of the list that is to be edited.
     */

    ArrayFactory.prototype.edit = function(id, init) {
      var oldName;
      this.id = id;
      this.init = init;
      oldName = this.vars.getById(id).name;
      if (this.check(oldName)) {
        this.vars.edit(this.id, this.name, this.values, this.init);
        return true;
      }
      return false;
    };


    /*
    Check the data that was provided by the HTML add/edit form by the validator.
    @param oldName The unique name of the list that is to be checked.
     */

    ArrayFactory.prototype.check = function(oldName) {
      var check, i, tokens, value, values, _i, _j, _k, _ref, _ref1, _ref2, _results;
      valid.target("#var-" + this.id + "-nameField", "#alert-var");
      $(".has-error").removeClass("has-error");
      $(".alert").alert('close');
      this.name = $("#var-" + this.id + "-name").val();
      check = valid.checkName(this.name, oldName);
      this.values = new Array();
      switch (this.init) {
        case Variables.UNINITIALIZED:
          this.size = $("#var-" + this.id + "-size").val();
          for (_i = 0, _ref = this.size; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--) {
            this.values.push("?");
          }
          break;
        case Variables.RANDOMIZED:
          this.size = $("#var-" + this.id + "-size").val();
          this.values = shuffle((function() {
            _results = [];
            for (var _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 0 <= _ref1 ? _j++ : _j--){ _results.push(_j); }
            return _results;
          }).apply(this));
          break;
        case Variables.CUSTOMIZED:
          values = $("#var-" + this.id + "-value").val();
          valid.target("#var-" + this.id + "-valueField", "#alert-var");
          if (valid.checkValues(values)) {
            tokens = values.split(DELIM);
            this.size = tokens.length;
            for (i = _k = 0, _ref2 = this.size; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
              value = tokens[i].replace(/\s/, "");
              if (valid.checkValue(value)) {
                this.values[i] = value;
              } else {
                this.values[i] = "?";
                check = false;
              }
            }
          } else {
            check = false;
          }
          break;
        default:
          $("#alert-var").append(err.error("List has to be initialized!"));
      }
      return check;
    };

    return ArrayFactory;

  })();

  VariableForm = (function() {
    var maxVarId;

    maxVarId = 0;

    function VariableForm(vars) {
      this.vars = vars;
      this.elementFactory = new ElementFactory(this.vars);
      this.arrayFactory = new ArrayFactory(this.vars);
    }

    VariableForm.prototype.addRowBelow = function() {
      var selection;
      selection = this.getSelection();
      if (((selection != null ? selection.last() : void 0) != null)) {
        this.addRow(selection.last());
        return this.moveSelectionDown("select");
      } else {
        return this.addRow($(".varRow").last());
      }
    };

    VariableForm.prototype.addRow = function(prevRow) {
      if (prevRow.prop("id") != null) {
        prevRow.after(varTemplate.rowEdit(this.maxVarId));
        $("#var-" + this.maxVarId).show("slow");
        this.updateActionHandlers(this.maxVarId);
        this.updatePlaceholders();
        return this.maxVarId++;
      } else {
        return $("#insertVarsHere").append(varTemplate.rowEdit(this.maxVarId));
      }
    };

    VariableForm.prototype.checkAndCreateVar = function(vid) {
      var success;
      success = false;
      switch ($("#slct-var-" + vid + "-init").val()) {
        case "elem-?":
          success = this.elementFactory.create(vid, Variables.UNINITIALIZED);
          break;
        case "elem-value":
          success = this.elementFactory.create(vid, Variables.CUSTOMIZED);
          break;
        case "array-?":
          success = this.arrayFactory.create(vid, Variables.UNINITIALIZED);
          break;
        case "array-random":
          success = this.arrayFactory.create(vid, Variables.RANDOMIZED);
          break;
        case "array-custom":
          success = this.arrayFactory.create(vid, Variables.CUSTOMIZED);
          break;
        default:
          console.log("can't recognize value...");
      }
      return success;
    };

    VariableForm.prototype.checkAndEditVar = function(vid) {
      var success;
      success = false;
      switch ($("#slct-var-" + vid + "-init").val()) {
        case "elem-?":
          success = this.elementFactory.edit(vid, Variables.UNINITIALIZED);
          break;
        case "elem-value":
          success = this.elementFactory.edit(vid, Variables.CUSTOMIZED);
          break;
        case "array-?":
          success = this.arrayFactory.edit(vid, Variables.UNINITIALIZED);
          break;
        case "array-random":
          success = this.arrayFactory.edit(vid, Variables.RANDOMIZED);
          break;
        case "array-custom":
          success = this.arrayFactory.edit(vid, Variables.CUSTOMIZED);
          break;
        default:
          console.log("can't recognize value...");
      }
      return success;
    };

    VariableForm.prototype.getSelection = function() {
      var selection;
      selection = $("#insertVarsHere tr.ui-selected");
      if (selection.last().prop("id") == null) {
        selection = null;
      }
      return selection;
    };

    VariableForm.prototype.moveSelectionDown = function(mode) {
      var nextLine, selection;
      selection = this.getSelection();
      if (selection != null) {
        nextLine = selection.last().next().next();
        if (nextLine.prop("id") != null) {
          switch (mode) {
            case "move":
              nextLine.detach();
              selection.first().before(nextLine);
              break;
            case "select":
              $("#insertVarsHere .ui-selected").removeClass("ui-selected");
              break;
            case "extend":
              nextLine.addClass("ui-selected");
              break;
            default:
              console.log("unknown mode: " + mode);
          }
          return this.updatePlaceholders();
        }
      }
    };

    VariableForm.prototype.moveSelectionUp = function(mode) {
      var prevLine, selection;
      selection = this.getSelection();
      if (selection != null) {
        prevLine = selection.first().prev().prev();
        if (prevLine.prop("id") != null) {
          switch (mode) {
            case "move":
              prevLine.detach;
              selection.last().after(prevLine);
              break;
            case "select":
              $("#insertVarsHere .ui-selected").removeClass("ui-selected");
              break;
            case "extend":
              prevLine.addClass("ui-selected");
              break;
            default:
              console.log("unknown mode: " + mode);
          }
          return this.updatePlaceholders();
        }
      }
    };

    VariableForm.prototype.performActionOnSelection = function(mode) {
      var selection;
      selection = this.getSelection();
      if (selection != null) {
        this.clearSelection();
        return selection.each(function() {
          var vid;
          vid = $(this).prop("id").split("-", 1);
          switch (mode) {
            case "remove":
              return window.varForm.performRemove(vid);
            case "cancel":
              return window.varForm.performCancel(vid);
            case "check":
              return window.varForm.performCheck(vid);
            default:
              return console.log("unknown mode: " + mode);
          }
        });
      }
    };

    VariableForm.prototype.performCancel = function(vid) {
      if (this.vars.findId(vid) === -1) {
        $("#var-" + vid).replaceWith(varTemplate.rowEdit(vid));
      } else {
        $("#var-" + vid).replaceWith(varTemplate.rowShow(vid));
      }
      this.updateActionHandlers(vid);
      return this.select(vid);
    };

    VariableForm.prototype.performCheck = function(vid) {
      if (this.vars.findId(vid) !== -1) {
        if (this.checkAndEditVar(vid)) {
          $("#var-" + vid).replaceWith(varTemplate.rowShow(vid));
        }
      } else {
        if (this.checkAndCreateVar(vid)) {
          $("#var-" + vid).replaceWith(varTemplate.rowShow(vid));
        }
      }
      this.updateActionHandlers(vid);
      return this.select(vid);
    };

    VariableForm.prototype.performEdit = function(vid) {
      $("#var-" + vid).replaceWith(varTemplate.rowEdit(vid));
      this.updateActionHandlers(vid);
      return this.select(vid);
    };

    VariableForm.prototype.performRemove = function(vid) {
      var e, nextVid;
      this.vars.removeById(vid);
      try {
        nextVid = $("#var-" + vid).next().next().prop("id").split("-", 1);
        this.select(nextVid);
      } catch (_error) {
        e = _error;
      }
      $("#var-" + vid).remove();
      return this.updatePlaceholders();
    };

    VariableForm.prototype.clearSelection = function() {
      return $(".ui-selected").removeClass("ui-selected");
    };

    VariableForm.prototype.select = function(vid) {
      return $("#var-" + vid).addClass("ui-selected");
    };

    VariableForm.prototype.updateActionHandlers = function(vid) {
      var curCancelButton, curCheckButton, curEditButton, curRemoveButton, curValueSelect;
      curRemoveButton = $("#btn-var-" + vid + "-remove");
      curEditButton = $("#btn-var-" + vid + "-edit");
      curCheckButton = $("#btn-var-" + vid + "-check");
      curCancelButton = $("#btn-var-" + vid + "-cancel");
      curValueSelect = $("#slct-var-" + vid + "-init");
      curRemoveButton.off("click");
      curEditButton.off("click");
      curCheckButton.off("click");
      curCancelButton.off("click");
      curValueSelect.off("click");
      curRemoveButton.click(function() {
        varForm.clearSelection();
        return varForm.performRemove(vid);
      });
      curCancelButton.click(function() {
        varForm.clearSelection();
        return varForm.performCancel(vid);
      });
      curEditButton.click(function() {
        varForm.clearSelection();
        return varForm.performEdit(vid);
      });
      curCheckButton.click(function() {
        varForm.clearSelection();
        return varForm.performCheck(vid);
      });
      return curValueSelect.click(function() {
        var targetSize, targetVal, value;
        value = $(this).val();
        targetVal = $($(this).data("options").targetVal);
        targetSize = $($(this).data("options").targetSize);
        switch (value) {
          case "elem-value":
          case "array-custom":
            targetVal.show("slow");
            return targetSize.hide("slow");
          case "array-?":
          case "array-random":
            targetVal.hide("slow");
            return targetSize.show("slow");
          default:
            targetVal.hide("slow");
            return targetSize.hide("slow");
        }
      });
    };

    VariableForm.prototype.updatePlaceholders = function() {
      $(".dummyRow").remove();
      $("#insertVarsHere").prepend(varTemplate.dummyRow());
      $(".varRow").after(varTemplate.dummyRow());
      return $(".dummyRow").droppable(function() {
        return {
          accept: "#btnAddVar",
          hoverClass: "dummyRow-hover",
          drop: function() {
            return varForm.addRow($(this));
          }
        };
      });
    };

    return VariableForm;

  })();


  /*
  This class provides several templates for HTML content that is inserted to the page dynamically.
   */

  VariableTemplates = (function() {
    function VariableTemplates(vars) {
      this.vars = vars;
    }

    VariableTemplates.prototype.rowShow = function(vid) {
      var v;
      v = this.vars.getById(vid);
      return "<tr id='var-" + vid + "' class='varRow'> <td class='handle' style='cursor: pointer;'>⣿</td> <td style='vertical-align: middle; text-alignment: left;'> <code class='cell'>" + v.name + " = " + v.value + "</code> </td> <td style='width: 65pt; text-align: center;'> <div class='btn-group btn-group-xs'> <button type='button' class='btn btn-default' id='btn-var-" + vid + "-edit' value='" + vid + "'><span class='glyphicon glyphicon-pencil'></span></button> </div>' </td>' </tr>";
    };

    VariableTemplates.prototype.rowEdit = function(vid) {
      var arrayCustomSelected, arrayRandomSelected, arrayUninitSelected, elemUninitSelected, elemValueSelected, name, sel, sizeInvisible, sizeSelected, value, valueInvisible, variable, _i;
      variable = this.vars.getById(vid);
      name = "";
      elemUninitSelected = "";
      elemValueSelected = "";
      arrayUninitSelected = "";
      arrayRandomSelected = "";
      arrayCustomSelected = "";
      valueInvisible = " display: none;";
      value = "";
      sizeInvisible = " display: none;";
      sizeSelected = new Array();
      for (_i = 0; _i <= 13; _i++) {
        sizeSelected.push("");
      }
      if (variable != null) {
        name = variable.name;
        sel = " selected";
        switch (variable.init) {
          case Variables.UNINITIALIZED:
            if (this.vars.isArrayById(vid)) {
              arrayUninitSelected = sel;
              sizeInvisible = "";
              sizeSelected[variable.value.length] = sel;
            } else {
              elemUninitSelected = sel;
            }
            break;
          case Variables.RANDOMIZED:
            arrayRandomSelected = sel;
            sizeInvisible = "";
            sizeSelected[variable.value.length] = sel;
            break;
          case Variables.CUSTOMIZED:
            if (this.vars.isArrayById(vid)) {
              arrayCustomSelected = sel;
            } else {
              elemValueSelected = sel;
            }
            valueInvisible = "";
            value = variable.value;
            break;
          default:
            console.log("unknown initialization " + variable.init);
        }
      }
      return "<tr id='var-" + vid + "' class='varRow' style='display: none;'> <td class='handle' style='cursor: pointer;'>⣿</td> <td style='vertical-align: middle;'> <div class='col-xs-3'> <div class='form-group' id='var-" + vid + "-nameField' style='margin-bottom:0px'> <label class='sr-only' for='var-" + vid + "-name'>Variable name</label> <input type='text' class='form-control' id='var-" + vid + "-name' value='" + name + "' placeholder='name'> </div> </div> <div class='col-xs-2' style='text-align: center;'> <div class='cell'><code>=</code></div> </div> <div class='col-xs-3'> <div class='form-group' style='margin-bottom:0px'> <label class='sr-only' for='var-" + vid + "-init'>Initialization</label> <select class='form-control' id='slct-var-" + vid + "-init' data-options=\"{'targetVal':'#var-" + vid + "-valueField', 'targetSize':'#var-" + vid + "-sizeField'}\"> <optgroup label='Element'> <option value='elem-?' " + elemUninitSelected + ">uninitialized</option> <option value='elem-value' " + elemValueSelected + ">value</option> </optgroup> <optgroup label='Array'> <option value='array-?' " + arrayUninitSelected + ">uninitialized</option> <option value='array-random' " + arrayRandomSelected + ">random</option> <option value='array-custom' " + arrayCustomSelected + ">custom</option> </optgroup> </select> </div> </div> <div class='col-xs-4'> <div class='form-group' id='var-" + vid + "-valueField' style='margin-left: 0px; margin-bottom:0px; " + valueInvisible + "'> <label class='sr-only' for='var-" + vid + "-value'>Initial value</label> <input type='text' class='form-control' id='var-" + vid + "-value' value='" + value + "' placeholder='value'> </div>' <div class='form-group' id='var-" + vid + "-sizeField' style='margin-left: 0px; margin-bottom:0px; " + sizeInvisible + "'> <label class='sr-only' for='var-" + vid + "-size'>Array size</label> <select class='form-control' id='var-" + vid + "-size'> <optgroup label='Size'> <option " + sizeSelected[2] + ">2</option><option " + sizeSelected[3] + ">3</option> <option " + sizeSelected[4] + ">4</option><option " + sizeSelected[5] + ">5</option> <option " + sizeSelected[6] + ">6</option><option " + sizeSelected[7] + ">7</option> <option " + sizeSelected[8] + ">8</option><option " + sizeSelected[9] + ">9</option> <option " + sizeSelected[10] + ">10</option><option " + sizeSelected[11] + ">11</option> <option " + sizeSelected[12] + ">12</option><option " + sizeSelected[13] + ">13</option> </optgroup> </select> </div> </div> </td> <td style='width: 65pt; text-align: center;'> <div class='btn-group btn-group-xs'> <button type='button' class='btn btn-default' id='btn-var-" + vid + "-check' value='" + vid + "' title='Check and add/edit variable'> <span class='glyphicon glyphicon-ok'></span> </button> <button type='button' class='btn btn-default' id='btn-var-" + vid + "-cancel' value='" + vid + "' title='Discard changes'> <span class='glyphicon glyphicon-remove'></span> </button> <button type='button' class='btn btn-default' id='btn-var-" + vid + "-remove' value='" + vid + "' title='Remove variable'> <span class='glyphicon glyphicon-trash'></span> </button> </div> </td> </tr>";
    };

    VariableTemplates.prototype.dummyRow = function() {
      return "<tr class='dummyRow' style='display: none;'><td colspan='3'></td></tr>";
    };

    return VariableTemplates;

  })();

  $(function() {
    var vars;
    vars = new Variables();
    this.varForm = new VariableForm(this.vars);
    window.varForm = this.varForm;
    window.varTemplate = new VariableTemplates(vars);
    $("#insertVarsHere").selectable({
      cancel: ".handle, .form-control, button"
    }).sortable({
      handle: ".handle",
      placeholder: "ui-state-highlight",
      stop: (function(_this) {
        return function() {
          return _this.varForm.updatePlaceholders();
        };
      })(this)
    });
    $("#btnAddVar").click((function(_this) {
      return function() {
        return _this.varForm.addRowBelow();
      };
    })(this));
    $("#btnAddVar").draggable({
      helper: "clone",
      revert: "invalid",
      start: (function(_this) {
        return function() {
          return $(".dummyRow").show();
        };
      })(this),
      stop: (function(_this) {
        return function() {
          $(".dummyRow").hide();
          return _this.varForm.updatePlaceholders();
        };
      })(this)
    });
    $.keyStroke(38, function() {
      return varForm.moveSelectionUp("select");
    });
    $.keyStroke(38, {
      modKeys: ['altKey']
    }, function() {
      return varForm.moveSelectionUp("move");
    });
    $.keyStroke(38, {
      modKeys: ['shiftKey']
    }, function() {
      return varForm.moveSelectionUp("extend");
    });
    $.keyStroke(40, function() {
      return varForm.moveSelectionDown("select");
    });
    $.keyStroke(40, {
      modKeys: ['altKey']
    }, function() {
      return varForm.moveSelectionDown("move");
    });
    $.keyStroke(40, {
      modKeys: ['shiftKey']
    }, function() {
      return varForm.moveSelectionDown("extend");
    });
    $.keyStroke(46, function() {
      return varForm.performActionOnSelection("remove");
    });
    $.keyStroke(27, function() {
      return varForm.performActionOnSelection("cancel");
    });
    return $.keyStroke(13, function() {
      return varForm.performActionOnSelection("check");
    });
  });

}).call(this);

//# sourceMappingURL=new-var.map
