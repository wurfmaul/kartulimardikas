// Generated by CoffeeScript 1.10.0
(function() {
  var extractLast, split;

  split = function(val) {
    return val.split(/,\s*/);
  };

  extractLast = function(term) {
    return split(term).pop();
  };


  /*
    Prepare combo boxes for tags.
   */

  window.initTagInput = function(elem) {
    var availableTags;
    availableTags = [];
    return $(elem).autocomplete({
      minLength: 0,
      source: function(request, response) {
        if (availableTags.length === 0) {
          return $.getJSON("api/tag.php", function(data, status, xhr) {
            availableTags = data.tags;
            return response($.ui.autocomplete.filter(availableTags, extractLast(request.term)));
          });
        } else {
          return response($.ui.autocomplete.filter(availableTags, extractLast(request.term)));
        }
      },
      focus: function() {
        return false;
      },
      select: function(event, ui) {
        var terms;
        terms = split(this.value);
        terms.pop();
        terms.push(ui.item.value);
        terms.push("");
        this.value = terms.join(", ");
        return false;
      }
    });
  };


  /*
    Prepare combo boxes for function search
   */

  window.initFuncInput = function(elem) {
    if ((elem.autocomplete("instance") != null)) {
      elem.autocomplete("destroy");
    }
    return elem.autocomplete({
      delay: 0,
      minLength: 1,
      source: function(request, response) {
        return $.getJSON("api/list.php?query=" + request.term, {
          term: extractLast(request.term)
        }, response);
      },
      select: function(event, ui) {
        $(this).val(ui.item.name);
        $(this).closest('.function-node').data('callee-id', ui.item.value);
        return false;
      }
    }).focusout(function() {
      return $(this).autocomplete("close");
    });
  };


  /*
    Prepare combo boxes for variable selection
   */

  window.initVarInput = function(elem) {
    var properties, vars;
    vars = [];
    $('.varRow').not('#var-prototype').each(function() {
      return vars.push($(this).data('name'));
    });
    properties = ["", "[*]", ".length"];
    if ((elem.autocomplete("instance") != null)) {
      elem.autocomplete("destroy");
    }
    return elem.autocomplete({
      delay: 0,
      minLength: 0,
      source: function(request, response) {
        var matcher, newSrc, val;
        val = request.term;
        if (val === "") {
          this.src = vars;
        } else if ($.inArray(val, vars) > -1) {
          newSrc = [];
          $.each(properties, function(i, elem) {
            return newSrc.push({
              value: val + elem,
              label: val + elem,
              variable: val
            });
          });
          this.src = newSrc;
        }
        matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
        return response($.grep(this.src, function(value) {
          value = value.label || value.value || value;
          return matcher.test(value);
        }));
      },
      select: function(event, ui) {
        var ref, val;
        val = (ref = ui.item.variable) != null ? ref : ui.item.label;
        return $(this).autocomplete("search", val);
      }
    }).click(function() {
      return $(this).autocomplete("search", $(this).val());
    }).focusout(function() {
      return $(this).autocomplete("close");
    });
  };


  /*
    Prepare combo boxes for variable initialization
   */

  window.initValueInput = function(elem) {
    var init, input, source;
    init = elem.find('.init');
    input = elem.find('.value');
    source = [];
    init.find('.combo-box').each(function() {
      return source.push({
        value: $(this).val(),
        label: $(this).text(),
        target: $(this).data('target')
      });
    });
    input.blur(function() {
      var comboVal, size, target, text, type, typeInput;
      text = $(this).val();
      comboVal = false;
      target = null;
      $.each(source, function(i, elem) {
        if (text === elem.label) {
          init.val(elem.value);
          comboVal = true;
          return target = elem.target;
        }
      });
      if (!comboVal) {
        init.val('C');
      }
      type = elem.find('.type-group');
      size = elem.find('.size-group');
      if ((target != null) && target === '.type') {
        typeInput = type.show('slow').find('.type').focus();
        if (typeInput.val().charAt(0) === '[') {
          return size.show('slow');
        } else {
          return size.hide('slow');
        }
      } else {
        type.hide('slow');
        size.hide('slow');
        return input.focusout();
      }
    });
    if ((input.autocomplete("instance") != null)) {
      input.autocomplete("destroy");
    }
    return input.autocomplete({
      delay: 0,
      minLength: 0,
      source: source,
      select: function(event, ui) {
        event.preventDefault();
        input.val(ui.item.label);
        return input.blur();
      }
    }).click(function() {
      return $(this).autocomplete("search", "");
    }).focusout(function() {
      return $(this).autocomplete("close");
    });
  };

}).call(this);
