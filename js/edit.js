// Generated by CoffeeScript 1.10.0
(function() {
  var Api, SCRIPTSITE, StepForm, VARSITE, VariableForm, refreshPreview, typeWatch, updateVisibility;

  SCRIPTSITE = $(".node_root");

  VARSITE = $("#insertVarsHere");

  Api = (function() {
    function Api() {}

    Api.editInfo = function() {
      var desc, long, name;
      name = $('#in-name').val();
      desc = $('#in-desc').val();
      long = $('#in-long').val();
      return $.ajax("api/algorithm.php?area=info", {
        type: 'POST',
        data: {
          name: name,
          desc: desc,
          long: long,
          aid: window.current.aid,
          lang: window.current.lang
        },
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            if (data['error'] != null) {
              _this._printError(data['error']);
              if (data['name'] != null) {
                return $('#in-name').val(data['name']).closest('.form-group').addClass('has-error');
              }
            } else {
              _this._printSuccess(data['success']);
              return $('.has-error').removeClass('has-error');
            }
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this._printError("Request Error: " + errorThrown);
          };
        })(this)
      });
    };

    Api.editTags = function() {
      var tags;
      tags = $('#in-tags').val();
      return $.ajax("api/tag.php", {
        type: 'POST',
        data: {
          tags: tags,
          aid: window.current.aid,
          lang: window.current.lang
        },
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            $('#in-tags').val(data['tags']);
            if (data['error'] != null) {
              _this._printError(data['error']);
              if (data['tags'] != null) {
                return $('#in-tags').closest('.form-group').addClass('has-error');
              }
            } else {
              _this._printSuccess(data['success']);
              return $('.has-error').removeClass('has-error');
            }
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this._printError("Request Error: " + errorThrown);
          };
        })(this)
      });
    };

    Api.editVariable = function(vid) {
      var name, size, type, value, varRow;
      varRow = $('#var-' + vid);
      name = varRow.find('.name').val();
      type = varRow.find('.type').val();
      value = varRow.find('.value').val();
      size = varRow.find('.size').val();
      return $.ajax("api/algorithm.php?area=var&action=edit", {
        type: 'POST',
        data: {
          vid: vid,
          name: name,
          type: type,
          value: value,
          size: size,
          aid: window.current.aid,
          lang: window.current.lang
        },
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            var i, len, msg, ref, ref1, token;
            msg = (ref = data['error']) != null ? ref : "";
            varRow = $('#var-' + vid);
            ref1 = ['name', 'type', 'value', 'size'];
            for (i = 0, len = ref1.length; i < len; i++) {
              token = ref1[i];
              if (data['error-' + token] != null) {
                msg += data['error-' + token];
                varRow.find('.' + token + '-group').addClass('has-error');
              } else {
                varRow.find('.' + token + '-group').removeClass('has-error');
                varRow.data(token, data[token]);
              }
            }
            if (msg !== "") {
              return _this._printError(msg);
            } else {
              _this._printSuccess(data['success']);
              varRow.find('.edit').hide();
              varRow.find('.view .cell').text(data['viewLabel']);
              if ((data['viewMode'] != null)) {
                varRow.find('.view .details').text('(' + data['viewMode'] + ')');
              }
              varRow.find('.view').show();
              return initVarInput($('.insertStepsHere').find('.combobox'));
            }
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this._printError("Request Error: " + errorThrown);
          };
        })(this)
      });
    };

    Api.removeVariable = function(vid) {
      return $.ajax("api/algorithm.php?area=var&action=remove", {
        type: 'POST',
        data: {
          vid: vid,
          aid: window.current.aid,
          lang: window.current.lang
        },
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            if (data['error'] != null) {
              return _this._printError(data['error']);
            } else {
              _this._printSuccess(data['success']);
              return $('#var-' + vid).hide('slow', function() {
                return $(this).remove();
              });
            }
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this._printError("Request Error: " + errorThrown);
          };
        })(this)
      });
    };

    Api.editScript = function(tree) {
      return $.ajax("api/algorithm.php?area=script", {
        type: 'POST',
        data: {
          tree: tree,
          aid: window.current.aid,
          lang: window.current.lang
        },
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            if (data['error'] != null) {
              return _this._printError(data['error']);
            } else {
              return _this._printSuccess(data['success']);
            }
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this._printError("Storage Error: " + errorThrown);
          };
        })(this)
      });
    };

    Api.parseMarkdown = function(source, target) {
      return $.ajax("api/markdown.php", {
        type: 'POST',
        data: {
          source: $(source).val()
        },
        dataType: 'json',
        success: (function(_this) {
          return function(data) {
            if (data['html'] === '') {
              return $(target).parent().hide('slow');
            } else {
              return $(target).html(data['html']).parent().show('slow');
            }
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this._printError("Request Error: " + errorThrown);
          };
        })(this)
      });
    };

    Api._printError = function(msg) {
      $('#alertText').html(msg);
      return $('#alert').show('slow');
    };

    Api._printSuccess = function(msg) {
      $('#alert').hide('slow');
      return $('#saveSuccess:hidden').text(msg).show('slow', function() {
        return $(this).fadeOut(3000);
      });
    };

    return Api;

  })();

  VariableForm = (function() {
    function VariableForm() {
      var lastVid;
      lastVid = $('.varRow').not('#var-prototype').last().data('vid');
      this.maxVarId = lastVid != null ? lastVid + 1 : 0;
      this.updateVarCount();
    }

    VariableForm.prototype.addRow = function() {
      var newRow;
      newRow = $('#var-prototype').clone(true).attr('id', 'var-' + this.maxVarId).data('vid', this.maxVarId).appendTo(VARSITE);
      newRow.find('.btn-var-count').data('target', 'var-' + this.maxVarId);
      newRow.find('.edit').show();
      newRow.find('.view').hide();
      newRow.show('slow');
      initValueInput(newRow.find('.value-group'));
      return this.maxVarId++;
    };

    VariableForm.prototype.updateVarCount = function() {
      return $('.varRow').not('#var-prototype').each(function() {
        var count, tree, vid;
        vid = $(this).data('vid');
        tree = new Tree(0);
        count = tree.memory.get(vid).count;
        $(this).find('.counter').text(count);
        if (count !== 0) {
          return $(this).find('.btn-var-remove').attr('disabled', 'disabled');
        } else {
          return $(this).find('.btn-var-remove').removeAttr('disabled');
        }
      });
    };

    VariableForm.prototype.performCancel = function(vid) {
      var name, varRow;
      $('#alert').hide('slow');
      varRow = $('#var-' + vid);
      name = varRow.data('name');
      if ((name != null) && name !== "") {
        varRow.find('.name').val(name);
        varRow.find('.init').val(varRow.data('init'));
        varRow.find('.value').val(varRow.data('value'));
        varRow.find('.size').val(varRow.data('size'));
        varRow.find('.edit').hide();
        return varRow.find('.view').show();
      } else {
        return varRow.hide('slow', function() {
          return $(this).remove();
        });
      }
    };

    VariableForm.prototype.performCheck = function(vid) {
      return Api.editVariable(vid);
    };

    VariableForm.prototype.performEdit = function(vid) {
      var varRow;
      varRow = $('#var-' + vid);
      initValueInput(varRow.find('.value-group'));
      varRow.find('.edit').show().find('.name').attr('disabled', 'disabled');
      return varRow.find('.view').hide();
    };

    VariableForm.prototype.performRemove = function(vid) {
      return Api.removeVariable(vid);
    };

    return VariableForm;

  })();

  StepForm = (function() {
    function StepForm(varForm1) {
      this.varForm = varForm1;
    }

    StepForm.prototype.addNode = function(prototypeId) {
      var node;
      node = $('.prototypes .' + prototypeId).clone().appendTo(SCRIPTSITE);
      this.varForm.updateVarCount();
      this.updateSortable();
      this.updateActionHandlers(node);
      return node;
    };

    StepForm.prototype.removeNode = function(node) {
      return node.hide('slow', (function(_this) {
        return function() {
          node.remove();
          _this.varForm.updateVarCount();
          _this.updateExpandables();
          return _this.saveChanges();
        };
      })(this));
    };

    StepForm.prototype.saveChanges = function() {
      var tree;
      tree = Tree.toJSON();
      if ((SCRIPTSITE.find('.invalid').length)) {
        return false;
      } else {
        this.varForm.updateVarCount();
        Api.editScript(tree);
        return true;
      }
    };

    StepForm.prototype.updateActionHandlers = function(parent) {
      initVarInput(parent.find('.combobox'));
      initFuncInput(parent.find('.combobox-functions'));
      parent.find('input, textarea').off('blur').blur((function(_this) {
        return function() {
          return _this.saveChanges();
        };
      })(this));
      parent.find('select').off('change').change((function(_this) {
        return function() {
          return _this.saveChanges();
        };
      })(this));
      return parent.find('.node-remove').off('click').click((function(_this) {
        return function(event) {
          return _this.removeNode($(event.currentTarget).parents('.node:first'));
        };
      })(this));
    };

    StepForm.prototype.updateExpandables = function() {
      return SCRIPTSITE.find('.expandable').each(function() {
        if ($(this).find('.expand-body .node').length === 0) {
          $(this).removeClass('expanded');
          return $(this).find('.bottom-collapsed-only').addClass('bottom');
        }
      });
    };

    StepForm.prototype.updateSortable = function() {
      var autoSave, dropParams, expandNode, sortParams;
      autoSave = (function(_this) {
        return function() {
          _this.saveChanges();
          return true;
        };
      })(this);
      expandNode = function(node) {
        $(node).addClass('expanded');
        return $(node).find('.bottom-collapsed-only').removeClass('bottom');
      };
      sortParams = {
        connectWith: ".sortable",
        placeholder: "sortable-highlight",
        forcePlaceholderSize: true,
        greedy: true,
        tolerance: 'pointer',
        update: autoSave,
        stop: this.updateExpandables
      };
      dropParams = {
        accept: ".node",
        tolerance: 'pointer',
        over: function() {
          return expandNode(this);
        }
      };
      SCRIPTSITE.find('.sortable').each(function() {
        if (($(this).sortable("instance") != null)) {
          return $(this).sortable("destroy");
        }
      });
      SCRIPTSITE.find('.expandable').each(function() {
        if (($(this).droppable("instance") != null)) {
          return $(this).droppable("destroy");
        }
      });
      SCRIPTSITE.sortable(sortParams);
      SCRIPTSITE.find('.sortable').sortable(sortParams);
      return SCRIPTSITE.find('.expandable').droppable(dropParams);
    };

    return StepForm;

  })();

  updateVisibility = function(variable) {
    var option, size;
    option = $(variable).find('option:selected');
    size = option.closest('.varRow').find('.size-group');
    if (option.data('target') === '.size') {
      return size.show('slow');
    } else {
      return size.hide('slow');
    }
  };


  /*
    Calls the callback function after a while, if it is not interrupted.
   */

  typeWatch = (function() {
    var timer;
    timer = 0;
    return function(callback, ms) {
      clearTimeout(timer);
      return timer = setTimeout(callback, ms);
    };
  })();

  refreshPreview = function() {
    return Api.parseMarkdown($("#in-long"), $('#description-preview'));
  };

  $(function() {
    var stepForm, varForm;
    initTagInput($('#in-tags'));
    $('#in-name, #in-desc, #in-long').blur(function() {
      return Api.editInfo();
    });
    $('#in-tags').blur(function() {
      return Api.editTags();
    });
    $('#in-long').keyup(function() {
      return typeWatch((function() {
        return refreshPreview();
      }), 500);
    });
    $('#refresh-preview').click(function() {
      return refreshPreview();
    });
    varForm = new VariableForm();
    $('#btnAddVar').click(function() {
      return varForm.addRow();
    });
    $('.btn-var-cancel').click(function() {
      return varForm.performCancel($(this).parents('.varRow').data('vid'));
    });
    $('.btn-var-check').click(function() {
      return varForm.performCheck($(this).parents('.varRow').data('vid'));
    });
    $('.btn-var-edit').click(function() {
      return varForm.performEdit($(this).parents('.varRow').data('vid'));
    });
    $('.btn-var-remove').click(function() {
      return varForm.performRemove($(this).parents('.varRow').data('vid'));
    });
    $('.type').change(function() {
      return updateVisibility($(this));
    });
    stepForm = new StepForm(varForm);
    stepForm.updateActionHandlers(SCRIPTSITE);
    stepForm.updateSortable();
    $('#node-btn-group a').click(function() {
      return stepForm.addNode($(this).data('node'));
    });
    $('.toggle-comment').click(function() {
      $(this).parent().find('.comment-container').toggle('slow');
      return $(this).toggleClass('fa-plus-square fa-minus-square');
    });
    return Tree.toJSON(0);
  });

}).call(this);
