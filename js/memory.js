// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Memory = (function() {
    function Memory(table) {
      this.table = table;
      this.reset = bind(this.reset, this);
      this.arraySet = bind(this.arraySet, this);
      this.arrayGet = bind(this.arrayGet, this);
      this.arrayCheck = bind(this.arrayCheck, this);
      this.set = bind(this.set, this);
      this.get = bind(this.get, this);
      this.find = bind(this.find, this);
      this.count = bind(this.count, this);
      this.memory = new Object();
      this.original = new Object();
      this.table.children().not('#var-prototype').each((function(_this) {
        return function(index, element) {
          var array, name, value, vid;
          vid = $(element).data('vid');
          name = $(element).data('name');
          value = $(element).data('value');
          array = $(element).data('type').charAt(0) === '[';
          _this.memory[vid] = {
            vid: vid,
            name: name,
            value: value,
            array: array,
            count: 0
          };
          return _this.original[vid] = {
            vid: vid,
            name: name,
            value: value,
            array: array,
            count: 0
          };
        };
      })(this));
    }

    Memory.prototype.count = function(vid) {
      var variable;
      variable = this.memory[vid];
      return ++variable.count;
    };

    Memory.prototype.find = function(name) {
      var vid;
      vid = -1;
      $.each(this.memory, function(index, elem) {
        if (elem.name === name) {
          return vid = elem.vid;
        }
      });
      return vid;
    };

    Memory.prototype.get = function(vid) {
      return this.memory[vid];
    };

    Memory.prototype.set = function(vid, value) {
      var error, error1;
      try {
        value.split(',');
        this.memory[vid].array = true;
      } catch (error1) {
        error = error1;
        this.memory[vid].array = false;
      }
      return this.memory[vid].value = value;
    };

    Memory.prototype.arrayCheck = function(vid, index) {
      var array, variable;
      variable = this.get(vid);
      if (!variable.array) {
        throw new ExecutionError('no_array_for_index', [variable.name]);
      }
      array = variable.value.split(',');
      if (index < 0 || array.length <= index) {
        throw new ExecutionError('index_out_of_bounds', [variable.name, index, array.length]);
      }
      return array;
    };

    Memory.prototype.arrayGet = function(vid, index) {
      var array, value;
      array = this.arrayCheck(vid, index);
      value = array[index];
      if (parseInt(value) + '' === value) {
        return parseInt(value);
      } else {
        return value;
      }
    };

    Memory.prototype.arraySet = function(vid, index, value) {
      var array;
      array = this.arrayCheck(vid, index);
      array[index] = value;
      return this.set(vid, array.join(','));
    };

    Memory.prototype.reset = function() {
      return $.each(this.original, (function(_this) {
        return function(index, elem) {
          _this.memory[index].value = elem.value;
          return _this.memory[index].count = 0;
        };
      })(this));
    };

    return Memory;

  })();

}).call(this);
