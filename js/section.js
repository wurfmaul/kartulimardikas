// Generated by CoffeeScript 1.10.0

/*
  Deals with sections (used in edit/view)
 */

(function() {
  var Section;

  Section = (function() {
    function Section() {}

    Section.init = function() {
      return this.sectionNumberToPanels(this.computeSectionNumber());
    };


    /*
      Changes the url in the address bar according to the new parameters.
     */

    Section.updateUrl = function(parameters) {
      return $.ajax("api/url.php", {
        type: 'GET',
        data: {
          parameters: parameters
        },
        dataType: 'text',
        success: (function(_this) {
          return function(url) {
            return window.history.pushState("", "", url);
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return _this._printError("Request Error: " + errorThrown);
          };
        })(this)
      });
    };

    Section.performToggle = function(element) {
      var sectionNumber;
      this.toggleSection(element, 'slow');
      sectionNumber = this.panelsToSectionNumber();
      this.updateUrl({
        params: window.current.parameters,
        section: sectionNumber
      });
      return this.storeSectionNumber(sectionNumber);
    };


    /*
      Collapses/Expands a section.
     */

    Section.toggleSection = function(element, speed) {
      element.find("span").toggleClass("glyphicon-chevron-right glyphicon-chevron-down");
      $(element.data("target")).toggle(speed);
      return $(element).toggleClass('collapsed');
    };


    /*
      Computes a section number from expansion state of panels.
     */

    Section.panelsToSectionNumber = function() {
      var counter, section;
      section = 0;
      counter = 1;
      $('.panel-heading').each(function() {
        if (!$(this).hasClass('collapsed')) {
          section += counter;
        }
        return counter *= 2;
      });
      return section;
    };


    /*
      Expands/collapses panels according to the section number.
     */

    Section.sectionNumberToPanels = function(sectionNumber) {
      var code, panel, panelNumber, panels, results;
      panels = $('.panel-heading');
      panelNumber = panels.length - 1;
      results = [];
      while (sectionNumber >= 0 && panelNumber >= 0) {
        code = Math.pow(2, panelNumber);
        if (sectionNumber >= code) {
          sectionNumber -= code;
        } else {
          panel = $(panels[panelNumber]);
          this.toggleSection(panel, 0);
        }
        results.push(panelNumber--);
      }
      return results;
    };


    /*
      Extract the correct section number
     */

    Section.computeSectionNumber = function() {
      var section;
      if (((section = window.current.section) != null)) {
        return section;
      } else if (localStorage && ((section = localStorage.getItem('section_' + window.current.action)) != null)) {
        return section;
      } else {
        return window.defaults.section;
      }
    };


    /*
      Stores a section number into the browser's local storage.
     */

    Section.storeSectionNumber = function(sectionNumber) {
      return localStorage.setItem('section_' + window.current.action, sectionNumber);
    };

    return Section;

  })();

  Section.init();

  $(function() {
    return $('.panel-heading').click(function() {
      return Section.performToggle($(this));
    });
  });

}).call(this);
